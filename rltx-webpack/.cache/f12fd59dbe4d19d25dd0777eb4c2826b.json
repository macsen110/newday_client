{"remainingRequest":"/Users/macsen/Desktop/rltx-webpack/api/Utils.js","dependencies":[{"path":"/Users/macsen/Desktop/rltx-webpack/api/Utils.js","mtime":1511527701000},{"path":"/Users/macsen/Desktop/rltx-webpack/node_modules/_babel-loader@6.2.10@babel-loader/lib/index.js","mtime":1481808750000},{"path":"/Users/macsen/Desktop/rltx-webpack/node_modules/_cache-loader@1.2.0@cache-loader/dist/cjs.js","mtime":1510929699000}],"contextDependencies":[],"result":["import { addClass, removeClass, toggleClass } from './classUtil';\nimport PublicArea from './PublicArea';\n\n/**\n * 参数对象转换为字符串\n * @param params\n */\nfunction formatData(value) {\n  return value < 10 ? '0' + value : value;\n}\nfunction objToParamStr(paramObj) {\n  let paramStr = '';\n  function getValue() {\n    for (const key of Object.keys(paramObj)) {\n      if (paramObj[key] && !Array.isArray(paramObj[key]) || (Array.isArray(paramObj[key]) && paramObj[key].length)) {\n        if (paramObj[key] instanceof Date) { // check type is Date\n          const year = paramObj[key].getFullYear(),\n            month = formatData(paramObj[key].getMonth() + 1),\n            day = formatData(paramObj[key].getDate()),\n            hour = formatData(paramObj[key].getHours()),\n            minute = formatData(paramObj[key].getMinutes()),\n            second = formatData(paramObj[key].getSeconds()),\n            str = '-',\n            pot = ':';\n          paramObj[key] = year + str + month + str + day + ' ' + hour + pot + minute + pot + second;\n        }\n        paramStr += '&';\n        paramStr += key;\n        paramStr += '=';\n        paramStr += encodeURIComponent(paramObj[key]);\n      }\n    }\n    return paramStr;\n  }\n  paramStr = getValue();\n  return paramStr.substring(1);\n}\n\n\n/**\n * 过滤对象中空值数据\n * @param paramObj\n */\nfunction objToObj(paramObj) {\n  const paramNewObj = {};\n  function getObj() {\n    for (const key of Object.keys(paramObj)) {\n      if (paramObj[key]) {\n        paramNewObj[key] = paramObj[key];\n      }\n    }\n    return paramNewObj;\n  }\n  return getObj();\n}\n\n/**\n * 获取匹配字段\n */\nfunction getParam(parConfig, eleDefine, eleInfo) {\n  const parConfigData = parConfig.data.content,\n    eleDefineData = eleDefine.data.content,\n    eleInfoData = eleInfo.data.content,\n    fields = [],\n    inputFields = [];\n  if (!parConfigData || !parConfigData.length) {\n    return false;\n  }\n  parConfigData.forEach((value, index) => {\n    if (!eleDefineData[value.elementCode]) {\n      console.error(`error, fieldConfigCode: ${value.fieldConfigCode} can not find elementInfoCodes`);\n      return false;\n    }\n    if (!value.extraParams) {\n      console.error(`error, fieldConfigCode: ${value.fieldConfigCode} can not find extraParams`);\n      return false;\n    }\n    try {\n      JSON.parse(value.extraParams)\n    } catch (error) {\n      console.error(value.extraParams, 'is not json, ', 'fieldConfigCode is', value.fieldConfigCode, );\n      return false;\n    }\n    const elementCode = value.elementCode,\n      fieldConfigCode = value.fieldConfigCode,\n      elementInfoCodes = eleDefineData[elementCode].elementInfoCodes,\n      event = eleDefineData[elementCode].event,\n      extraParams = JSON.parse(value.extraParams),\n      len = elementInfoCodes.length;\n    value.extraParams = [];\n    for (let i = 0; i < len; i++) {\n      value.extraParams[i] = {};\n      if ('required' in extraParams) {\n        value.required = extraParams.required;\n        value.extraParams[i].required = extraParams.required;\n      }\n      if ('detailLinkVisiable' in extraParams) {\n        value.detailLinkVisiable = extraParams.detailLinkVisiable;\n      }\n      if ('area' in extraParams) {\n        value.area = extraParams.area;\n      }\n    }\n    for (let i = 1; i < len + 1; i++) {\n      if (!extraParams) {\n        console.error(`error, extraParams in fieldConfigCode: ${fieldConfigCode} is ${extraParams}`);\n        return false;\n      }\n      Object.keys(extraParams).forEach((key) => {\n        if (key.indexOf(i) > 0) {\n          const param = key.replace(i, '');\n          value.extraParams[i - 1][param] = extraParams[key];\n        }\n      });\n      if (value.extraParams[i - 1]['inputKey']) {\n        const inputKey = value.extraParams[i - 1]['inputKey'],\n          index = inputKey.indexOf('.'),\n          len = inputKey.length;\n        inputFields.push({\n          key: inputKey.slice(0, index),\n          name: inputKey.slice(index + 1, len),\n          field: value.extraParams[i - 1]['field']\n        });\n      }\n      Object.keys(eleInfoData[elementInfoCodes[i - 1]]).forEach((key) => {\n        value.extraParams[i - 1][key] = eleInfoData[elementInfoCodes[i - 1]][key];\n      });\n      //              self.requestList.push(value.extraParams[i - 1]);\n      const type = value.extraParams[i - 1].controlType;\n      if (type === 'checkbox' || type === 'radio') {\n        value.extraParams[i - 1].value = [];\n      } else if (type === 'select') {\n        value.extraParams[i - 1].value = '';\n        value.extraParams[i - 1].text = '';\n      } else {\n        value.extraParams[i - 1].value = '';\n      }\n      // value.extraParams[i - 1].showName = value.showName;\n    }\n    value.event = event;\n    fields.push(value);\n  });\n  return {\n    field: fields,\n    inputKey: inputFields\n  };\n}\n\n// 计算tab宽度\nfunction calTab() {\n  const topdocument = window.top.document,\n    wrapWidth = topdocument.querySelector('.tab-wrap').offsetWidth,\n    element = topdocument.querySelectorAll('#tabList li');\n  let tabWidth = 0;\n  Object.keys(element).forEach((index) => {\n    const liWidth = element[index].offsetWidth + 2;\n    tabWidth += liWidth;\n  });\n  // console.log(wrapWidth, tabWidth);\n  topdocument.querySelector('#tabList').style.width = `${tabWidth}px`;\n  if (tabWidth > wrapWidth) {\n    // console.log('success');\n    addClass(topdocument.querySelector('.tab-wrap'), 'is-scroll');\n    const scrollWidth = topdocument.querySelector('.tab-scroll').offsetWidth,\n      x = tabWidth - scrollWidth;\n    topdocument.querySelector('#tabList').style.marginLeft = `${-x}px`;\n  }\n}\n\n// 展示tab和iframe\nfunction selectTabAndIframe(link) {\n  const topdocument = window.top.document,\n    tabList = topdocument.getElementById('tabList').getElementsByTagName('li'),\n    iframes = topdocument.getElementById('iframeContent').getElementsByTagName('iframe'),\n    navItemLiList = topdocument.querySelectorAll('.nav-list-itemli');\n  for (let i = tabList.length - 1; i >= 0; i--) {\n    if (tabList[i].getAttribute('data-url') === link) {\n      addClass(tabList[i], 'active');\n    } else {\n      removeClass(tabList[i], 'active');\n    }\n  }\n  for (let k = iframes.length - 1; k >= 0; k--) {\n    if (iframes[k].getAttribute('data-url') === link) {\n      removeClass(iframes[k], 'hide');\n    } else {\n      addClass(iframes[k], 'hide');\n    }\n  }\n  for (let j = navItemLiList.length - 1; j >= 0; j--) {\n    if (navItemLiList[j].getAttribute('data-link') === link) {\n      addClass(navItemLiList[j], 'active');\n    } else {\n      removeClass(navItemLiList[j], 'active');\n    }\n  }\n}\n\n// 获取data-link和data-title生成新的tab和iframe\nfunction urlRedirect(targetLink, targetTitle) {\n  if (targetLink && targetTitle) {\n    if (targetLink === \"undefined\") {\n      return false;\n    }\n    const topdocument = window.top.document,\n      iframeContent = topdocument.querySelector('#iframeContent'),\n      iframeList = iframeContent.getElementsByTagName('iframe'),\n      newIframe = document.createElement('iframe'),\n      tabList = topdocument.querySelector('#tabList');\n    // 是否已经存在相同iframe\n    let sameFlag = false;\n    for (let i = iframeList.length - 1; i >= 0; i--) {\n      if (iframeList[i].getAttribute('data-url') === targetLink) {\n        // 存在相同的iframe\n        removeClass(iframeList[i], 'hide');\n        iframeList[i].src = targetLink;\n        sameFlag = true;\n        break;\n      }\n    }\n    if (!sameFlag) {\n      const tab = document.createElement('li'),\n        span1 = document.createElement('span'),\n        span2 = document.createElement('span');\n      // tab.className = 'col-md-3 mark';\n      tab.setAttribute('data-url', targetLink);\n      tab.className = 'page-tab-item';\n      span1.className = 'ellipsis page-tab-ellipsis-name';\n      span1.innerHTML = targetTitle;\n      span2.className = 'page-tab-close';\n      span2.innerHTML = 'x';\n      tab.appendChild(span1);\n      tab.appendChild(span2);\n      tabList.appendChild(tab);\n      for (let j = iframeList.length - 1; j >= 0; j--) {\n        removeClass(iframeList[j], 'active');\n      }\n      newIframe.src = targetLink;\n      newIframe.setAttribute('data-url', targetLink);\n      newIframe.className = 'iframe';\n      iframeContent.appendChild(newIframe);\n      calTab();\n    }\n\n    // 显示选中的toptab和iframe\n    selectTabAndIframe(targetLink);\n  }\n}\n\n// 获取高度\nfunction adaptHeight() {\n  if (document.querySelectorAll('.page-header')[0] && document.querySelectorAll('.table-opr')[0] && document.querySelectorAll('.pagination')[0]) {\n    const winHeight = window.innerHeight,\n      pageHeader = document.querySelectorAll('.page-header')[0].offsetHeight,\n      tableOprHeight = document.querySelectorAll('.table-opr')[0].offsetHeight,\n      pageHeight = document.querySelectorAll('.pagination')[0].offsetHeight,\n      list = document.querySelector('#list'),\n      advanceSearch = document.querySelector('.advance-search'),\n      asbd = document.querySelector('#asBd');\n    // console.log(winHeight,pageHeader, tableOprHeight, pageHeight);\n    let tableHeight = null;\n    tableHeight = winHeight - pageHeader - tableOprHeight - pageHeight - 1;\n    list.style.height = winHeight + 'px';\n    document.querySelectorAll('.fix-table-wrap')[0].style.height = tableHeight + 'px';\n    if (advanceSearch) {\n      advanceSearch.style.height = winHeight + 'px';\n    }\n    if (asbd) {\n      asbd.style.maxHeight = winHeight - 75 + 'px';\n    }\n  }\n\n}\n\n// 生成高度\nfunction changeHeight() {\n  if (document.querySelectorAll('.page-header')[0] && document.querySelectorAll('.table-opr')[0] && document.querySelectorAll('.pagination')[0]) {\n    const winHeight = window.innerHeight,\n    pageHeader = document.querySelectorAll('.page-header')[0].offsetHeight,\n    tableOpr = document.querySelectorAll('.table-opr')[0].offsetHeight,\n    pagination = document.querySelectorAll('.pagination')[0].offsetHeight,\n    unit = 'px',\n    realHeight = (winHeight - pageHeader - tableOpr - pagination) + unit;\n  document.querySelectorAll('.fix-table-wrap')[0].style.height = realHeight;\n  }\n}\n\n// 高级搜索\nfunction advanceSearch() {\n  const listPage = document.querySelector('#list'),\n    miniSearch = document.querySelector('#miniSearch'),\n    advanceSearch = document.querySelector('#advanceSearch'),\n    asClose = document.querySelector('#asClose');\n  // console.log(winHeight,listPage,advanceSearch);\n  advanceSearch.addEventListener('click', () => {\n    toggleClass(listPage, 'opened');\n    toggleClass(miniSearch, 'hide');\n  });\n  asClose.addEventListener('click', () => {\n    toggleClass(listPage, 'opened');\n    toggleClass(miniSearch, 'hide');\n  });\n}\n\nfunction initTableWidth() {\n  const headerDiv = document.querySelectorAll('.el-table__header-wrapper')[0];\n  // console.log(headerDiv);\n}\n\n\n/*   通过时间戳生成对应的时间格式\n *   params:zeit 可输入，默认为当前的时间\n *          time 可输入，对应的输出格式\n *   return string\n * */\nfunction dateFormat(zeit, time) {\n  var date = zeit ? new Date(zeit) : null;\n  if (date !== null) {\n    var strYear,\n      strMonth,\n      strDate,\n      strHour,\n      strMinute,\n      strSecond,\n      dateFormat,\n      str1 = '-',\n      str2 = ':';\n    strMonth = formatData(date.getMonth() + 1);\n    strDate = formatData(date.getDate());\n    strYear = formatData(date.getFullYear());\n    strHour = formatData(date.getHours());\n    strMinute = formatData(date.getMinutes());\n    strSecond = formatData(date.getSeconds());\n    switch (time) {\n      case 'notime':\n        dateFormat = strYear + str1 + strMonth + str1 + strDate;\n        break;\n      case 'month':\n        dateFormat = strYear + str1 + strMonth;\n        break;\n      case 'day':\n        dateFormat = strYear + str1 + strMonth + str1 + strDate;\n        break;\n      case 'withoutSecond':\n        dateFormat = strYear + str1 + strMonth + str1 + strDate + ' ' + strHour + str2 + strMinute;\n        break;\n      case 'justTime':\n        dateFormat = strHour + str2 + strMinute + str2 + strSecond;\n        break;\n      default:\n        dateFormat = strYear + str1 + strMonth + str1 + strDate + ' ' + strHour + str2 + strMinute + str2 + strSecond;\n    }\n    return dateFormat;\n  }\n  return null;\n}\n\n//返回两位小数并加上千分位，\nfunction moneyFormat(num, back) {\n  if (num) {\n    return num.toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,');\n  }\n  if (back === 'null') {\n    return null;\n  }\n  return '0.00';\n}\n\n//数字转字符串\nfunction NumtoStr(val) {\n  return isNaN(val) ? val : val.toString();\n}\n\n//获取url键的value\nfunction getUrl(key) {\n  const reg = new RegExp(`(^|&)${key}=([^&]*)(&|$)`),\n    result = window.location.search.substr(1).match(reg);\n  // console.log(result);\n  return result ? decodeURI(result[2]) : null;\n}\n\nfunction getParamsFromURL(URL) {\n  var paramObject = {};\n  var paramStr = URL.substring(1);\n  var params = paramStr.split('&');\n  for (var i = 0; i < params.length; i++) {\n    var pair = params[i].split('=');\n    paramObject[pair[0]] = pair[1];\n    paramObject[pair[0]] = decodeURI(paramObject[pair[0]]);\n  }\n  // console.log(paramObject);\n  return paramObject;\n}\n\nfunction dealInputKey(inputKeys, cb) {\n  const inputKeyArray = inputKeys.split(',');\n  inputKeyArray.forEach((inputKey) => {\n    const inputKeyArr = inputKey.split('.');\n    PublicArea.addSetObservers(inputKeyArr[0], (outData) => {\n      cb(inputKeyArr[1], outData);\n    });\n  });\n}\n\nexport { objToParamStr, objToObj, getParam, urlRedirect, adaptHeight, changeHeight, advanceSearch, initTableWidth, dateFormat, moneyFormat, NumtoStr, getUrl, getParamsFromURL, dealInputKey };\n",null]}