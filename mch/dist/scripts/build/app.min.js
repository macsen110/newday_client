webpackJsonp([1],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Created by wudi on 15/11/30.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, ui) {
  var router = __webpack_require__(7);  
  var APP = {
    version: "1.0.0",
    /**
     * 选择底部导航高亮
     * @param i//-2 隐藏底部按钮,-1 reset底部按钮, else 触发当前按钮高亮
     */
    selectBottomNav: function(i) {
      if (i == -2) $("#bottom_nav").hide();
      else if (i == -1) {
        $("#bottom_nav").show();
        $("#bottom_nav .item").forEach(function(item, index) {
          $(item)
            .addClass("bind-location")
            .removeClass("active");
        });
      } else {
        $("#bottom_nav").show();
        $("#bottom_nav .item").forEach(function(item, index) {
          if (index == i) {
            $(item).addClass("active");
            //.removeClass('bind-location')
          } else {
            $(item)
              .addClass("bind-location")
              .removeClass("active");
          }
        });
      }
    },
    /**
     * ajax 请求公共方法
     * @param url
     * @param data
     * @param callback
     */
    ajaxFunc: function(url, data, callback) {
      var self = this;
      var token = localStorage.getItem("token");
      var otherDate = localStorage.getItem("profileInfo")
        ? JSON.parse(localStorage.getItem("profileInfo"))
        : {};
      data.uid = self.uid;
      data.token = token;
      data.appType = self.openType;
      data.cardNo = otherDate.cardNo;
      $.ajax({
        cache: true,
        url: self.host.api + url,
        type: "post",
        data: JSON.stringify(data),
        contentType: "application/json",
        success: function(response) {
          if (!callback) return;
          var callbackFunc = callback.func,
            callbackContext = callback.context;
          callbackFunc &&
            typeof callbackFunc == "function" &&
            callbackFunc.call(callbackContext, response);
        },
        error: function(err) {
          console.error(url + "  错误是:" + err);
          APP.router.endLoading();
          APP.ui.showPrompt("网络错误,<br>请稍后重试");
        }
      });
    }
  };
  APP.init = function() {
    var self = this;
    //强制刷新用户个人信息的缓存内容
    if (localStorage.getItem("storeVersion") != 1) {
      localStorage.setItem("storeVersion", 1);
      localStorage.removeItem("profileInfo");
    }
    self.uid = self._getOpenId();
    self.openType = self._getOpenType();
    self.host = {
      api: "https://www.macsen318.com/api"
    };
    self.ui = ui;
    //self._todo();
    //self.router.originalUrl = location.href;
    self.bindUI();
  };

  APP._getOpenType = function() {
    var self = this;
    var openTypeValue = self.tools.getLocationParam(location.search).appType;
    return openTypeValue;
  };
  APP._getOpenId = function() {
    var self = this;
    var openIdValue = decodeURIComponent(
      self.tools.getLocationParam(location.search).openId
    );
    return openIdValue;
  };
  APP._todo = function() {
    var self = this;
    if (localStorage.getItem("token")) {
      var token = localStorage.getItem("token");
      var data = {
        request_context: {
          uid: self.uid,
          appType: self.openType
        },
        access_token: token,
        system: "mch"
      };
      self.getCustomerInfo(data);
    } else {
      $.ajax({
        url: self.host.api + "/infanthospital/v1/getToken",
        type: "get",
        contentType: "application/json",
        success: function(response) {
          localStorage.setItem("token", response.data.token);
          self._todo();
        }
      });
    }
  };
  APP.bindUI = function() {
		
		
    //开放调试提醒
    window.onerror = function(msg, url, lineNo, columnNo, error) {
      var string = msg.toLowerCase();
      var substring = "script error";
      if (string.indexOf(substring) > -1) {
        alert("Script Error: See Browser Console for Detail");
      } else {
      }
      alert(msg, url, lineNo, columnNo, error);
      return false;
    };
    this.tools.bindLocation();
  };
  APP.getCustomerInfo = function(data, successCb) {
    var self = this;
    $.ajax({
      url: self.host.api + "/infanthospital/v1/initCustomer",
      data: JSON.stringify(data),
      type: "post",
      contentType: "application/json",
      success: function(response) {
        APP.router.endLoading();
        if (response.ret == 1) {
          var emStatus = response.data.emStatus;
          if (emStatus == 2 || emStatus == 1) {
            self.saveProfileInfo(emStatus, response, successCb);
          }
        }
      },
      error: function() {
        APP.router.endLoading();
        APP.ui.showPrompt("网络错误,<br>请稍后重试");
      }
    });
  };
  APP.tools = {
    pageCount: function() {},
    //记录分享,点击之类的打点
    recordBehavior: function(url, args) {},
    bindLocation: function() {
      var self = this;
      var isMove = false;
      //解决ios 下delegate 不能点击bug
      var tapEvent = "ontouchstart" in window ? "touchend" : "click";
      document.body.addEventListener("touchmove", function() {
        isMove = true;
      });
      document.body.addEventListener(tapEvent, function(e) {
        var bindLocationDom = self.getDomByEle(e.target, ".bind-location");
        if (bindLocationDom) {
          if (bindLocationDom.dataset.href) {
            e.preventDefault();
            e.stopPropagation();
            if (!isMove) {
              var stateObj = {};
              if (bindLocationDom.dataset.options) {
                stateObj = JSON.parse(bindLocationDom.dataset.options);
              }
              stateObj.pageName = bindLocationDom.dataset.href;
              APP.router.go(stateObj.pageName, stateObj);
            } else isMove = false;
          }
        }
      });
    },
    getDomByEle: function(curentEl, selector) {
      var sign = selector[0];
      function getId() {
        while (curentEl) {
          if (curentEl.id === selector.slice(1)) return curentEl;
          curentEl = curentEl.parentNode;
        }
        return undefined;
      }
      function getClass() {
        while (curentEl) {
          if (
            curentEl.classList &&
            curentEl.classList.contains(selector.slice(1))
          )
            return curentEl;
          curentEl = curentEl.parentNode;
        }
        return undefined;
      }
      function getEleName() {
        while (curentEl) {
          if (curentEl.tagName === selector.toUpperCase()) return curentEl;
          curentEl = curentEl.parentNode;
        }
        return undefined;
      }
      switch (sign) {
        case ".":
          return getClass();
        case "#":
          return getId();
        default:
          return getEleName();
      }
    },
    formatDate: function() {
      var date = new Date();
      var format = "yyyy-MM-dd HH:mm:ss";
      switch (typeof date) {
        case "string":
          date = new Date(date.replace(/-/, "/"));
          break;
        case "number":
          date = new Date(date);
          break;
      }
      if (!date instanceof Date) return;
      var dict = {
        yyyy: date.getFullYear(),
        M: date.getMonth() + 1,
        d: date.getDate(),
        H: date.getHours(),
        m: date.getMinutes(),
        s: date.getSeconds(),
        MM: ("" + (date.getMonth() + 101)).substr(1),
        dd: ("" + (date.getDate() + 100)).substr(1),
        HH: ("" + (date.getHours() + 100)).substr(1),
        mm: ("" + (date.getMinutes() + 100)).substr(1),
        ss: ("" + (date.getSeconds() + 100)).substr(1)
      };
      return format.replace(/(yyyy|MM?|dd?|HH?|ss?|mm?)/g, function() {
        return dict[arguments[0]];
      });
    },
    serializeObj: function(options) {
      var arr = [];
      for (var i in options) {
        arr.push(i + "=" + options[i]);
      }
      return arr.join("&");
    },
    getLocationParam: function(url) {
      var params = url
        .toString()
        .slice(1)
        .split("&");
      var returnObject = {};
      for (var i = 0; i != params.length; i++) {
        var index = params[i].indexOf("=");
        returnObject[params[i].slice(0, index)] = params[i].slice(index + 1);
      }
      return returnObject;
    },
    //设置页面标题,主要针对ios下的微信端
    setPageTitle: function(title) {
      var $body = $("body");
      document.title = title;
      // hack在微信等webview中无法修改document.title的情况
      var $iframe = $(
        '<iframe src="/fav.icon" style="height:0px; width: 0px; visibility: hidden"></iframe>'
      )
        .on("load", function() {
          setTimeout(function() {
            $iframe.off("load").remove();
          }, 0);
        })
        .appendTo($body);
    },
    platform: function() {
      var ua = navigator.userAgent;
      var android = ua.match(/(Android)[\s\/]+([\d.]+)/);
      var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
      var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
      var ipod = !ipad && !iphone && ua.match(/(iPod).*OS\s([\d_]+)/);
      if (ipad || iphone || ipod) {
        return 2;
      } else {
        return 1;
      }
    },
    //日期控件change方法在ios和android下表现不一样
    selectValueChange: function($dom, cb) {
      var self = this;
      var eventName =
        self.platform() == 2
          ? "blur"
          : self.getEnvironment() == 2 ? "input" : "change";
      $dom.on(eventName, function() {
        cb($dom.val());
      });
    }, //正则表达式对象
    regExpObj: {
      mobile: /(^(([0\+]\d{2,3}-)?(0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$)|(^0{0,1}1[3|4|5|6|7|8|9][0-9]{9}$)/
    },
    //判断运行浏览器环境,
    getEnvironment: function() {
      var ua = navigator.userAgent.toLowerCase();
      var isWeixin = ua.indexOf("micromessenger") != -1;
      var isApply = ua.indexOf("aliapp") != -1;
      if (isWeixin) return 1;
      if (isApply) return 2;
      return null;
    },
    isValidEnvironment: function() {
      var isValidEnvironments = this.getEnvironment();
      var environment = APP._getOpenType();
      if (!isValidEnvironments) {
        if (environment == 1) {
          //微信环境
          $("#wx_environment_placeholder").show();
          return false;
        }
        if (environment == 2) {
          //支付宝环境
          $("#apply_environment_placeholder").show();
          return false;
        }
      } else {
        if (isValidEnvironments == 1 && environment == 2) {
          $("#apply_environment_placeholder").show();
          return false;
        } else if (isValidEnvironments == 2 && environment == 1) {
          $("#wx_environment_placeholder").show();
          return false;
        } else {
          $("#wx_environment_placeholder").show();
          return false;
        }
      }
      return true;
    }
  };
  APP.profileInfo = {};
  APP.saveProfileInfo = function(status, response, successCb) {
    var self = this;
    //等于1是没有卡
    if (status == 1) {
      localStorage.removeItem("profileInfo");
      localStorage.removeItem("reportList");
      sessionStorage.clear();
      self.profileInfo.emStatus = status;
      if (successCb) successCb(status);
      else self.router.replace("antenatal");
    } else {
      personInfoObj(response.data.customerList[0], 1);
    }
    function personInfoObj(obj, cardLens) {
      self.profileInfo = obj;
      self.profileInfo.uid = APP.uid;
      self.profileInfo.emChannel = response.emChannel;
			self.profileInfo.emStatus = status;
			
      if (successCb) successCb(status, cardLens);
      else self.router.replace("home");
    }
  };
  // APP.router = {
  // 	setRouter: function (stateObj, component) {
  // 		if (!('urlAction' in stateObj)) {
  // 			if (stateObj.replace) history.replaceState(stateObj, '', APP.tools.setPath(stateObj));
  // 			else history.pushState(stateObj, '', APP.tools.setPath(stateObj));
  // 		}
  // 		this.updatePageView(component)
  // 	},
  // 	updatePageView: function (component) {
  // 		this.endLoading();
  // 		if (this.curPathWidget) this.curPathWidget.destroy();
  // 		this.curPathWidget = component;
  // 		//APP.afterInitPageFun()
  // 	},
  // 	curPathWidget: undefined,
  // 	curPathName: undefined,
  // 	cbPathObj: APP.tools.cbPathObj(),
  // 	gotoPage: function (stateObj) {
  // 		this.curPathName = stateObj.pageName;
  // 		this.startLoading();
  // 		this.pathNew(stateObj.pageName, stateObj);
  // 	},
  // 	initJump: function () {
  // 		var stateObj = {};
  // 		if (this.cbPathObj) stateObj = this.cbPathObj;
  // 		else stateObj.pageName = 'antenatal';
  // 		stateObj.replace = 1;
  // 		this.gotoPage(stateObj);
  // 		this.cbPath = null;
  // 	},
  // 	startLoading: function (type) {
  // 		var $loading = $('#layout_loading');
  // 		$loading.addClass('visible')
  // 	},
  // 	endLoading: function (type) {
  // 		var $loading = $('#layout_loading');
  // 		$loading.removeClass('visible')
  // 	}

  // };
  APP.router = {};
  // var asyncLoad = function(path, stateObj, title) {
  //   var load = require("bundle-loader?lazy&name=[name]!./" + path + ".js");
  //   load(function(component) {
  //     if (APP.router.curPathName == stateObj.pageName)
  //       component.init(stateObj, title);
  //   });
	// };
	
  var asyncFun = async function(path) {
    var getComponent = r =>
      __webpack_require__.e/* require.ensure */(0).then((require => __webpack_require__(8)).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    var component = await getComponent(path);
    return component;
  };
  Promise.resolve(asyncFun()).then(function(home) {
		
    var config = [
      {
        pageName: "home",
        title: "首页",
        component: home
      }
    ];
    APP.router = router._init(config);
    APP.init();
  });
	Object.defineProperty(window, "APP", {
		value: APP
	});
  // APP.router._goPathNew = function(path, stateObj) {
  //   var load = require("bundle-loader?lazy&name=[name]!./" + path + ".js");
  //   load(function(component) {
  //     if (APP.router.curPathName == stateObj.pageName) component.init(stateObj);
  //   });
  // };

  return {};
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {
    /****************
    tab 切换插件
    参数:
    tabNav:表示tab click item
    tabCon: 内容区域显示
    tabNavItems 触发切换的element
    tabConItems  显示区域的内容elements
    curIndex 当前显示的index
    *****/
    function TabWidget(args) {
        if(args && ("object" == typeof args)){
            for(var arg in args){
                this[arg] = args[arg];
            }
        }
        this.tabNavContainer = this.tabNavContainer || document.querySelector('.tab-nav-container');
        this.tabConContainer = this.tabConContainer || document.querySelector('.tab-con-container');
        this.tabNavContainer && (this.tabNavItems = this.tabNavItems || this.tabNavContainer.children);
        this.tabConContainer && (this.tabConItems = this.tabConItems || this.tabConContainer.children);
        this.curIdex = this.curIdex || 0;
        this.init()
    }

    TabWidget.prototype = {
        constructor: TabWidget,
        init: function () {
            var self = this;
            self.change(this.curIdex);
            if (self.tabNavItems) {
                [].forEach.call(self.tabNavItems, function (item, index) {
                    item.addEventListener('click', function () {
                        if (!this.classList.contains('on')) self.change(index);				
                    })
                })            
            }
        },
        change: function(index) {
            var self = this;
            self.curIdex = index;
            if (self.tabNavItems) {
                [].forEach.call(self.tabNavItems, function (item, i) {
                    if (i !== index) {
                        item.classList.remove('on');
                        self.tabConItems[i].classList.remove('on')
                    }
                    else {
                        item.classList.add('on');
                        self.tabConItems[i].classList.add('on')
                    }
                })

            }
            else {
                [].forEach.call(self.tabConItems, function (item, i) {
                    if (i !== index) item.classList.remove('on')
                    else item.classList.add('on')
                })
                
            } 
            if (self.callback) self.callback(index);           
        }
            
    }
    /***
     * *dialog 页面弹框组件
     * *
     * *****/    
    //弹框
    function Dialog(options) {
        this.title = null;
        this.content = null;
        this.foot = null;
        this.canMaskClose = true;
        this.className = ''
        this.type = 'dialog';
        this.container = document.createElement('div');
        this.isMask = true;
        this.config(options);
        this.mask = this.isMask ? '<div class="dialog-mask-bg"></div>' : '';
        this.open();
        return this;
    }
    Dialog.prototype = {
        constructor: Dialog,
        config: function (options) {
            if (typeof options === 'object') {			
                for (var i in options) {
                    this[i] = options[i]
                }
            }
            return this;
        },
        handleEvent: function (e) {
            var target = e.target;
            var classList = target.classList;
            
            //点击遮罩层,不做任何事情,直接摧毁弹框
            if (classList.contains('dialog-mask-bg')) {
                this.canMaskClose ? this.close() : null; 			
                return
            }
            //点击确定按钮
            if (classList.contains('btn-dialog-ok')) {
                this.afterOk()
                return
            }
            //点击取消按钮,或者关闭的图标
            if (classList.contains('btn-dialog-cancel') || classList.contains('icon-dialog-cancel')) {
                this.close()
            }
        },
        open: function() {
            this.container.className = "widget-dialog "+this.className;
            this.title = this.title ? '<div class="title">' + this.title + '</div>' :'';
            this.content = this.content ? '<div class="content">' + this.content + '</div>' : '';
            this.foot = this.foot ? '<div class="foot">' + this.foot + '</div>' : ''; 
            this.main = this.title + this.content + this.foot;
            this.container.innerHTML = '<div class="main">' + this.main + '</div>' + this.mask;
            var body = document.body;
            var self = this;
            body.appendChild(this.container);
            //remeber do not write like this
            //this.container.addEventLister('click', this.close) 
            //this replay for the current object in the event callback functions
        
            this.afterOpen();
        
            this.container.addEventListener('click',this)
        
        },
        afterOpen: function () {
            //do something after the dialog open;
        },
        afterOk: function () {
            //default event is destory;
            this.destory()
        },
        close: function () {
            this.afterClose();
            this.destory();
        
        },
        afterClose: function () {
            //do something after the dialog close;
        },
        destory: function () {
            var body = document.body;
            if (this.container) {
                body.removeChild(this.container);
                this.container = null;
            }
        }
    };
    /**
     * *easy Move
     * *页面滑动插件
     * *******/
	function easyMove (element, options) {
		var isTouch = 'ontouchstart' in window;
		if (!element) return null; 
		this.element = element;
        this.parentEle = options.parentEle || this.element;
		this.child = element.children[0]; //选取一个子元素,以便可以随时获取其宽度
        this.length = element.children.length;
        this.focusIndex = options.focusIndex || 0;
		this.index = options.index || 0; //初始选中元素序号
		this.speed = options.speed || 300; //矫正动画时间ms
		this.offset = options.offset || 0; //选中点偏移
		this.limitBorder = options.limitBorder || false; //滑动后是否会回顶到边界，优先级高于offset
		this.showNum = options.showNum || this.length; //显示的元素个数（可选,只在limitBorder为true时需要）
		this.deltaX = 0;
		this.deltaY = 0;
		this.callback = options.callback || function () {}; //矫正动画完成后的回调函数
        this.touchMoveCb = options.touchMoveCb || function () {}; //监听动画滑动
		this.hasMoved = false; //是否触发过onTouchMove，用以区分点击与滑动
        this.orientation = options.orientation || 1; //滑动的方向,1为横向, 2为纵向
        this.distance = options.distance;//自定义滑动距离,
		if (this.parentEle.addEventListener) {
	  		this.parentEle.addEventListener(isTouch?'touchstart':'mousedown', this, false);
	    	this.element.addEventListener('webkitTransitionEnd', this, false);
	    	this.element.addEventListener('transitionend', this, false);
	    }
        //判断横向还是竖向滑动,设置相应的宽或高
        if (this.orientation == 1) { 
            this.childWidth = options.childWidth || this.child.clientWidth;
            this.parentWidth = options.parentWidth || this.childWidth * this.length;
        }
        else {
            this.childHeight = options.childHeight || this.child.clientHeight;
            this.parentHeight = options.parentHeight || this.childHeight * this.length;
        }
	    this.init();
	}
	easyMove.prototype = {
		init: function () {
			var self = this;
            //设置item和container的宽度
            [].forEach.call(self.element.children, function (item) {
                if (self.orientation == 1) item.style.width = self.childWidth + 'px';
                else item.style.height = self.childHeight + 'px';
            })
            if (self.orientation == 1) self.element.style.width = self.parentWidth + 'px';
            else self.element.style.height = self.parentHeight + 'px';
            
			if (self.orientation == 1) self.element.style.MozTransform = self.element.style.webkitTransform = 'translate3d(' + (-(self.index-self.focusIndex) * self.childWidth) + 'px,0,0)';
		    if (self.orientation == 2) self.element.style.MozTransform = self.element.style.webkitTransform = 'translate3d(0,' + (-(self.index-self.focusIndex) * self.childHeight) + 'px,0)';
            self.move(self.index)
        },
		handleEvent: function (e) {
			var self = this;
	    	switch (e.type) {
	      		case 'mousedown':
	      			self.element.addEventListener('mousemove', self, false);
	   				self.element.addEventListener('mouseup', self, false);
	   				self.element.addEventListener('mouseout', self, false);
	      			self.onTouchStart(e);
					break;
	      		case 'mousemove':
	      			self.onTouchMove(e);
	      			break;
	      		case 'mouseup':
		      		self.element.removeEventListener('mousemove', self, false);
		   			self.element.removeEventListener('mouseup', self, false);
		   			self.element.removeEventListener('mouseout', self, false);
		      		self.onTouchEnd(e);
					break;
	     		case 'mouseout':
	      			self.element.removeEventListener('mousemove', self, false);
	   				self.element.removeEventListener('mouseup', self, false);
	   				self.element.removeEventListener('mouseout', self, false);
	      			self.onTouchEnd(e);
	      			break;
	    		case 'touchstart':
	        		self.parentEle.addEventListener('touchmove', self, false);
	        		self.parentEle.addEventListener('touchend', self, false);
	        		self.onTouchStart(e);
	        		break;
	      		case 'touchmove':
	      			self.onTouchMove(e);
	      			break;
	      		case 'touchend':
	        		self.parentEle.removeEventListener('touchmove', self, false);
	        		self.parentEle.removeEventListener('touchend', self, false);
	      			self.onTouchEnd(e);
	      			break;
	      		case 'webkitTransitionEnd':
	      		case 'msTransitionEnd':
	      		case 'oTransitionEnd':
	      		case 'transitionend': self.transitionEnd(e); break;
	    	}
		},
		onTouchStart: function (e) {
			var self = this;
			self.start = {
				pageX: e.touches[0].pageX,
				pageY: e.touches[0].pageY
			};
			//将动画时间设为0，以便在按下时马上结束尚在进行的动画
			self.element.style.webkitTransition = "-webkit-transform 0ms";
		},
		onTouchMove: function (e) {
			var self = this;
            
			//若有多个touch或者被缩放则不滑动		
			if(e.touches.length > 1 || e.scale && e.scale !== 1) return;
			self.deltaX = e.touches[0].pageX - self.start.pageX;
			self.deltaY = e.touches[0].pageY - self.start.pageY;
			//判断滑动方向
            //横向
			if (self.orientation == 1 && Math.abs(self.deltaX) > Math.abs(self.deltaY)) {
				e.preventDefault();
                if (!self.hasMoved) self.touchMoveCb &&  self.touchMoveCb(self.index)   
				self.element.style.MozTransform = self.element.style.webkitTransform = 'translate3d(' + (self.deltaX - (self.index-self.focusIndex) * self.childWidth) + 'px,0,0)';
			}
            //纵向
            if (self.orientation == 2 && Math.abs(self.deltaY) > Math.abs(self.deltaX)) {
				e.preventDefault();
                if (!self.hasMoved) self.touchMoveCb &&  self.touchMoveCb(self.index)   
				self.element.style.MozTransform = self.element.style.webkitTransform = 'translate3d(0,' + (self.deltaY - (self.index-self.focusIndex) * self.childHeight) + 'px,0)';
			}
			self.hasMoved = true;
            
		},
		onTouchEnd: function (e) {
			var self = this;
			if (!self.hasMoved) {
				if (self.orientation == 1)  self.deltaX = 0; //若没有滑动过，重置值
                if (self.orientation == 2) self.deltaY = 0
			}
			self.hasMoved = false;
			//矫正位置到最贴近目标处
            if (self.orientation == 1) {
                var width = self.childWidth;
                var targetIndex;
                if (self.distance) {
                    var remainderDistance = self.deltaX - parseInt(self.deltaX/width) * width;
                    if (remainderDistance > 0) {
                        targetIndex = self.index - (parseInt(self.deltaX/width) + (remainderDistance - self.distance > 0 ? 1 : 0));
                    }
                    else {
                        targetIndex = self.index - (parseInt(self.deltaX/width) + (Math.abs(remainderDistance) - self.distance > 0 ? -1 : 0));
                    } 
                }
                else targetIndex = self.index - Math.round(self.deltaX/width);
                
            }
            if (self.orientation == 2) {
                var height = self.childHeight;
                var targetIndex;
                if (self.distance) {
                    var remainderDistance = self.deltaY - parseInt(self.deltaY/height) * height;
                    if (remainderDistance > 0) {
                        targetIndex = self.index - (parseInt(self.deltaY/height) + (remainderDistance - self.distance > 0 ? 1 : 0));
                    }
                    else {
                        targetIndex = self.index - (parseInt(self.deltaY/height) + (Math.abs(remainderDistance) - self.distance > 0 ? -1 : 0));
                    } 
                }
                else targetIndex = self.index - Math.round(self.deltaY/height);
            }
            
			targetIndex = self.limitIndex(targetIndex);
			self.autoMove(targetIndex);
            if (self.callback) {
				var choseId = self.index + self.offset;
				self.callback(self.index);
			}
		},
		transitionEnd: function (e) {
			var self = this;
		},
		autoMove: function (targetIndex) {
			var self = this;
			var style = this.element.style;
			//var width = self.childWidth;
	    	style.webkitTransition = "-webkit-transform "+self.speed+"ms";
            if (self.orientation == 1) style.MozTransform = style.webkitTransform = 'translate3d(' + (-targetIndex * self.childWidth) + 'px,0,0)';
            if (self.orientation == 2) style.MozTransform = style.webkitTransform = 'translate3d(0,' + (-targetIndex * self.childHeight) + 'px,0)';
	    	self.index = targetIndex + self.focusIndex;
		},
		move: function (targetIndex) {
			var self = this;
			targetIndex -= self.offset; 
			targetIndex = self.limitIndex(targetIndex);
			var style = this.element.style;
			style.webkitTransition = "-webkit-transform "+self.speed+"ms";
            if (self.orientation == 1) style.MozTransform = style.webkitTransform = 'translate3d(' + (-targetIndex * self.childWidth) + 'px,0,0)';
            if (self.orientation == 2) style.MozTransform = style.webkitTransform = 'translate3d(0,' + (-targetIndex * self.childHeight) + 'px,0)';
	    	self.index = targetIndex + self.focusIndex;
            if (self.callback) self.callback(self.index);
		},
		limitIndex: function (targetIndex) {
			var self = this;
			if (!self.limitBorder) {
				if (targetIndex < -self.offset) targetIndex = -self.offset;	
				else if (targetIndex > self.length - 1 - self.offset) targetIndex = self.length - 1 - self.offset;
			} 
            else {
				if (targetIndex < 0) targetIndex = 0;
                else if ((targetIndex > self.length - self.showNum + self.focusIndex)) targetIndex = self.length -(self.showNum - self.focusIndex);
			}
			return targetIndex - self.focusIndex;
		}
	}



    return {
        TabWidget: function (args) {return new TabWidget(args)},
        Dialog: function (args) {return new Dialog(args)},
        easyMove: function (dom, args) { return new easyMove(dom, args)},
        showPrompt: function (message, cb) {
            var tpl = '<div class="layout_prompt">'+message+'</div>';
            if($('.layout_prompt').length > 0){
                $('.layout_prompt').remove();
                clearTimeout(this.promptTimer);
                this.promptTimer = null;
            }
            $('body').append(tpl);
            this.promptTimer = setTimeout(function(){
                $('.layout_prompt').remove();
                if (cb) cb()
            },3000);
        }
    }
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * 简易路由系统适用于几
 * 个简单的活动页面
 */
(function (win, factory) {
	if (true) {
			module.exports = factory();
	} 
	else if (typeof define === 'function' && define.amd) {
			define(factory);
	} 
	else {
			win.YAO_EASY_ROUTER = factory();
	}
})(this, function() {
  var APP = {};
  APP.tools = {
    setPath: function (obj) {
			var path = location.pathname;
			delete obj.replace;
			return path + '?' + this.serializeObj(obj)
		},
		serializeObj: function (options) {
			var arr = [];
			for (var i in options) {
				arr.push(i+'='+options[i]);				
			}
			return arr.join('&');
    },
    getLocationParam: function (url) {
			var params = url.toString().slice(1).split("&");
			var returnObject = {};
			for(var i = 0; i != params.length; i++) {
				var index = params[i].indexOf("=");
				returnObject[params[i].slice(0, index)] = params[i].slice(index+1);
			}
			return returnObject;
    },
    setPageTitle: function (title) {
			var $body = document.body;
			title && (document.title = title);
		},
		cbPathObj: function () {
			var query = location.search;
			if ('pageName' in this.getLocationParam(query))  {
				var cbPathObj = this.getLocationParam(query);
				if (cbPathObj.pageName !== 'index') {
					delete cbPathObj.openId;
					delete cbPathObj.appType;
					return cbPathObj;
				}
			}
			return undefined;
		},
		getType: function (fun) {
			function isFunction(value) { return typeof value == "function" }
			function isWindow(obj)     { return obj != null && obj == obj.window }
			function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }
			function isObject(obj)     { return typeof obj == "object" }
			function isPlainObject(obj) {
				return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype
			}
			function isArray(value) { return value instanceof Array }
			function likeArray(obj) { return typeof obj.length == 'number' }
			if (isFunction(fun)) return 'function';
			if (isPlainObject(fun)) return 'object';
			return false;
		}
	};
	APP.router = {
		setRouter: function (stateObj, component, title) {
			if (!('urlAction' in stateObj)) {
				if (stateObj.replace) history.replaceState(stateObj, title, APP.tools.setPath(stateObj));
				else history.pushState(stateObj, title, APP.tools.setPath(stateObj));
			}
			APP.tools.setPageTitle(title)
			this.updatePageView(component, stateObj)
		},
		updatePageView: function (component, stateObj) {
			this.endLoading();
			if (this.curPathWidget) this.curPathWidget.destroy && this.curPathWidget.destroy();
			this.curPathWidget = component
		},
		curPathWidget: undefined,
		curPathName: undefined,
		cbPathObj: APP.tools.cbPathObj(),
		go: function (name, query) {
			var stateObj = {};
			var self = this;
			stateObj.pageName = name;
			if (APP.tools.getType(query) === 'object') {
				for (var i in query) stateObj[i] = query[i];
			}
			self._gotoPage(stateObj)
		},
		replace: function (name, query) {
			var stateObj = {};
			var self = this;
			stateObj.pageName = name;
			stateObj.replace = 1;
			if (APP.tools.getType(query) === 'object') {
				for (var i in query) stateObj[i] = query[i];
			}
			self._gotoPage(stateObj)
		},
		_gotoPage: function (stateObj) {
			this.curPathName = stateObj.pageName;
			this._goPathNew(stateObj.pageName, stateObj);            
		},
		initJump: function () {
			var stateObj = {};
			if (this.cbPathObj) stateObj = this.cbPathObj;
			else stateObj.pageName = 'home';
			stateObj.replace = 1;
			this._gotoPage(stateObj);
			this.cbPath = null;
		},
		startLoading: function (type) {
			var $loading = $('#layout_loading');
			$loading.addClass('visible')
		},
		endLoading: function (type) {
			// var $loading = $('#layout_loading');
			// $loading.removeClass('visible')
		},
		_init(config) {
			var self = this;
			self._routerConfigArr = config || [];
			self._registerListener();
			self.initJump()
		},
		_registerListener() {
			var self = this;
			window.onpopstate = function (event) {
				var stateObj = event.state;
				if (stateObj) {
					stateObj.urlAction = 1;
					self._gotoPage(stateObj)
				}
			}
		},
		_goPathNew: function (path, stateObj) {
			var self = this;
			var filterCurRouterObjArr = self._routerConfigArr.filter(
				function (item) {return item.pageName === path}
			)
			if (filterCurRouterObjArr.length) {
				var filterCurRouterObj = filterCurRouterObjArr[0];
				if (!filterCurRouterObj._updateInSide)  {
					self.toDoRouterCb(stateObj, filterCurRouterObj.component, filterCurRouterObj.title)
					self.setRouter(stateObj, filterCurRouterObj.component, filterCurRouterObj.title)
				}
				else self.toDoRouterCb(stateObj, filterCurRouterObj.component,filterCurRouterObj.title)
			}
			else alert(path + '路径尚未配置相关信息')
		},
		toDoRouterCb: function (stateObj, component, title) {
			if (APP.tools.getType(component) === 'function') component(stateObj, this, title)
			else if (APP.tools.getType(component) === 'object') {
				component.init && component.init(stateObj, this, title)
			}
		}
	};
  return APP;
})

/***/ })
],[5]);