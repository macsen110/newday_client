{"version":3,"sources":["webpack:///./script/build/components/ts_hook.tsx"],"names":["React","__webpack_require__","useReducer","useEffect","useContext","useRef","initialState","count","LanguageContext","createContext","lang","reducer","state","action","type","exports","default","_a","useState","_b","dispatch","inputEl","console","log","createElement","Fragment","onClick","ref","current","focus"],"mappings":"0IAAA,IAAAA,EAAAC,EAAA,GACOC,EAAAF,EAAAE,WAAYC,EAAAH,EAAAG,UAAWC,EAAAJ,EAAAI,WAAYC,EAAAL,EAAAK,OACpCC,EAAe,CAAEC,MAAO,GACxBC,EAAkBR,EAAMS,cAAc,CAAEC,KAAM,OAOpD,SAASC,EAAQC,EAAkBC,GACjC,OAAQA,EAAOC,MACb,IAAK,QACH,OAAOR,EACT,IAAK,YACH,MAAO,CAAEC,MAAOK,EAAML,MAAQ,GAChC,IAAK,YACH,MAAO,CAAEA,MAAOK,EAAML,MAAQ,GAChC,QACE,OAAOK,GA6BbG,EAAAC,QAzBA,WACQ,IAAAC,EAAAjB,EAAAkB,SAAA,GAACX,EAAAU,EAAA,GACDE,GADQF,EAAA,GACRf,EAAAS,EAAA,CAAAJ,WAACK,EAAAO,EAAA,GAAOC,EAAAD,EAAA,GACNT,EAAAN,EAAAI,GAAAE,KACFW,EAAUhB,EAAyB,MASzC,OAHAF,EAAU,WACRmB,QAAQC,IAAI,UAAUhB,KAGtBP,EAAAwB,cAAAxB,EAAAyB,SAAA,KACEzB,EAAAwB,cAAA,WAAMd,GACNV,EAAAwB,cAAA,qBAAaZ,EAAML,OACnBP,EAAAwB,cAAA,WAAKxB,EAAAwB,cAAA,UAAQE,QAAS,WAAM,OAAAN,EAAS,CAAEN,KAAM,YAAU,UACvDd,EAAAwB,cAAA,WAAKxB,EAAAwB,cAAA,UAAQE,QAAS,WAAM,OAAAN,EAAS,CAAEN,KAAM,gBAAc,MAC3Dd,EAAAwB,cAAA,WAAKxB,EAAAwB,cAAA,UAAQE,QAAS,WAAM,OAAAN,EAAS,CAAEN,KAAM,gBAAc,MAC3Dd,EAAAwB,cAAA,WAAKxB,EAAAwB,cAAA,SAAOG,IAAKN,EAASP,KAAK,SAASd,EAAAwB,cAAA,UAAQE,QAf9B,WACjBL,GAAWA,EAAQO,SACpBP,EAAQO,QAAQC,UAasD","file":"static/js/9.78028fef1ddc691b872a.js","sourcesContent":["import * as React from \"react\";\nconst {useReducer, useEffect, useContext, useRef} = React \nconst initialState = { count: 0 };\nconst LanguageContext = React.createContext({ lang: 'en' });\ntype StateType = {\n  count: number\n}\ntype ActionType = {\n  type: 'reset' | 'decrement' | 'increment'\n}\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\nfunction Counter() {\n  const [count, setCount] = React.useState(0)\n  const [state, dispatch] = useReducer(reducer, {count});\n  const { lang } = useContext(LanguageContext);\n  const inputEl = useRef<HTMLInputElement>(null);\n  const onButtonClick = () => {\n    if(inputEl && inputEl.current) {\n      inputEl.current.focus();\n    } \n  }\n  useEffect(() => {\n    console.log(`hello, ${count}`) \n  })\n  return (\n    <>\n      <div>{lang}</div>\n      <div>Count: {state.count}</div>\n      <div><button onClick={() => dispatch({ type: 'reset' })}>Reset</button></div>\n      <div><button onClick={() => dispatch({ type: 'increment' })}>+</button></div>\n      <div><button onClick={() => dispatch({ type: 'decrement' })}>-</button></div>\n      <div><input ref={inputEl} type=\"text\" /><button onClick={onButtonClick}>Focus the input</button></div>\n    </>\n  );\n}\nexport interface HelloProps { compiler: string; framework: string; }\nexport default Counter"],"sourceRoot":""}