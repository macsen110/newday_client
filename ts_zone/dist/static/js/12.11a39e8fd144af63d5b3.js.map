{"version":3,"sources":["webpack:///./script/build/components/ts_hook.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","useReducer","useEffect","useContext","useRef","initialState","count","LanguageContext","lang","reducer","state","action","type","_a","_b","dispatch","inputEl","console","log","onClick","ref","current","focus"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GACOI,EAAAD,EAAA,WAAYE,EAAAF,EAAA,UAAWG,EAAAH,EAAA,WAAYI,EAAAJ,EAAA,OACpCK,EAAe,CAAEC,MAAO,GACxBC,EAAkBP,EAAA,cAAoB,CAAEQ,KAAM,OAOpD,SAASC,EAAQC,EAAkBC,GACjC,OAAQA,EAAOC,MACb,IAAK,QACH,OAAOP,EACT,IAAK,YACH,MAAO,CAAEC,MAAOI,EAAMJ,MAAQ,GAChC,IAAK,YACH,MAAO,CAAEA,MAAOI,EAAMJ,MAAQ,GAChC,QACE,OAAOI,GA6BEX,EAAA,QAzBf,WACQ,IAAAc,EAAAb,EAAA,YAACM,EAAAO,EAAA,GACDC,GADQD,EAAA,GACRZ,EAAAQ,EAAA,CAAAH,WAACI,EAAAI,EAAA,GAAOC,EAAAD,EAAA,GACNN,EAAAL,EAAAI,GAAAC,KACFQ,EAAUZ,EAAyB,MASzC,OAHAF,EAAU,WACRe,QAAQC,IAAI,UAAUZ,KAGtBN,EAAA,cAAAA,EAAA,cACEA,EAAA,yBAAMQ,GACNR,EAAA,mCAAaU,EAAMJ,OACnBN,EAAA,yBAAKA,EAAA,wBAAQmB,QAAS,WAAM,OAAAJ,EAAS,CAAEH,KAAM,YAAU,UACvDZ,EAAA,yBAAKA,EAAA,wBAAQmB,QAAS,WAAM,OAAAJ,EAAS,CAAEH,KAAM,gBAAc,MAC3DZ,EAAA,yBAAKA,EAAA,wBAAQmB,QAAS,WAAM,OAAAJ,EAAS,CAAEH,KAAM,gBAAc,MAC3DZ,EAAA,yBAAKA,EAAA,uBAAOoB,IAAKJ,EAASJ,KAAK,SAASZ,EAAA,wBAAQmB,QAf9B,WACjBH,GAAWA,EAAQK,SACpBL,EAAQK,QAAQC,UAasD","file":"static/js/12.11a39e8fd144af63d5b3.js","sourcesContent":["import * as React from \"react\";\nconst {useReducer, useEffect, useContext, useRef} = React \nconst initialState = { count: 0 };\nconst LanguageContext = React.createContext({ lang: 'en' });\ntype StateType = {\n  count: number\n}\ntype ActionType = {\n  type: 'reset' | 'decrement' | 'increment'\n}\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\nfunction Counter() {\n  const [count, setCount] = React.useState(0)\n  const [state, dispatch] = useReducer(reducer, {count});\n  const { lang } = useContext(LanguageContext);\n  const inputEl = useRef<HTMLInputElement>(null);\n  const onButtonClick = () => {\n    if(inputEl && inputEl.current) {\n      inputEl.current.focus();\n    } \n  }\n  useEffect(() => {\n    console.log(`hello, ${count}`) \n  })\n  return (\n    <>\n      <div>{lang}</div>\n      <div>Count: {state.count}</div>\n      <div><button onClick={() => dispatch({ type: 'reset' })}>Reset</button></div>\n      <div><button onClick={() => dispatch({ type: 'increment' })}>+</button></div>\n      <div><button onClick={() => dispatch({ type: 'decrement' })}>-</button></div>\n      <div><input ref={inputEl} type=\"text\" /><button onClick={onButtonClick}>Focus the input</button></div>\n    </>\n  );\n}\nexport interface HelloProps { compiler: string; framework: string; }\nexport default Counter"],"sourceRoot":""}