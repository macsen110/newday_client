{"version":3,"sources":["webpack:///./script/build/components/ts_hook.tsx"],"names":[],"mappings":";;;;;;;;AAAA,mCAA+B;AACxB,iCAAU,EAAE,2BAAS,EAAE,6BAAU,EAAE,qBAAM,CAAS;AACzD,IAAM,YAAY,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;AAClC,IAAM,eAAe,GAAG,KAAK,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAO5D,SAAS,OAAO,CAAC,KAAgB,EAAE,MAAkB;IACnD,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO;YACV,OAAO,YAAY,CAAC;QACtB,KAAK,WAAW;YACd,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;QACpC,KAAK,WAAW;YACd,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;QACpC;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC;AAED,SAAS,OAAO;IACR,0BAAqC,EAApC,aAAK,EAAE,gBAA6B;IACrC,8CAAgD,EAA/C,aAAK,EAAE,gBAAwC,CAAC;IAC/C,2CAAI,CAAiC;IAC7C,IAAM,OAAO,GAAG,MAAM,CAAmB,IAAI,CAAC,CAAC;IAC/C,IAAM,aAAa,GAAG;QACpB,IAAG,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;YAC7B,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SACzB;IACH,CAAC;IACD,SAAS,CAAC;QACR,OAAO,CAAC,GAAG,CAAC,YAAU,KAAO,CAAC;IAChC,CAAC,CAAC;IACF,OAAO,CACL;QACE,iCAAM,IAAI,CAAO;QACjB;;YAAa,KAAK,CAAC,KAAK,CAAO;QAC/B;YAAK,gCAAQ,OAAO,EAAE,cAAM,eAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAA3B,CAA2B,YAAgB,CAAM;QAC7E;YAAK,gCAAQ,OAAO,EAAE,cAAM,eAAQ,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAA/B,CAA+B,QAAY,CAAM;QAC7E;YAAK,gCAAQ,OAAO,EAAE,cAAM,eAAQ,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAA/B,CAA+B,QAAY,CAAM;QAC7E;YAAK,+BAAO,GAAG,EAAE,OAAO,EAAE,IAAI,EAAC,MAAM,GAAG;YAAA,gCAAQ,OAAO,EAAE,aAAa,sBAA0B,CAAM,CACrG,CACJ,CAAC;AACJ,CAAC;AAED,kBAAe,OAAO","file":"static/js/13.25079295dc291406e101.js","sourcesContent":["import * as React from \"react\";\nconst {useReducer, useEffect, useContext, useRef} = React \nconst initialState = { count: 0 };\nconst LanguageContext = React.createContext({ lang: 'en' });\ntype StateType = {\n  count: number\n}\ntype ActionType = {\n  type: 'reset' | 'decrement' | 'increment'\n}\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\nfunction Counter() {\n  const [count, setCount] = React.useState(0)\n  const [state, dispatch] = useReducer(reducer, {count});\n  const { lang } = useContext(LanguageContext);\n  const inputEl = useRef<HTMLInputElement>(null);\n  const onButtonClick = () => {\n    if(inputEl && inputEl.current) {\n      inputEl.current.focus();\n    } \n  }\n  useEffect(() => {\n    console.log(`hello, ${count}`) \n  })\n  return (\n    <>\n      <div>{lang}</div>\n      <div>Count: {state.count}</div>\n      <div><button onClick={() => dispatch({ type: 'reset' })}>Reset</button></div>\n      <div><button onClick={() => dispatch({ type: 'increment' })}>+</button></div>\n      <div><button onClick={() => dispatch({ type: 'decrement' })}>-</button></div>\n      <div><input ref={inputEl} type=\"text\" /><button onClick={onButtonClick}>Focus the input</button></div>\n    </>\n  );\n}\nexport interface HelloProps { compiler: string; framework: string; }\nexport default Counter"],"sourceRoot":""}